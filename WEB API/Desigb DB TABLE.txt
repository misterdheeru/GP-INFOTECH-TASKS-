DATA BASE TABLE  FILE UPLOAD 
==========================
SELECT *FROM students 
SELECT *FROM countrys 
SELECT *FROM states
SELECT *FROM cities
===================
  
CREATE PROCEDURE studentcrud
    @Action VARCHAR(10), -- 'INSERT', 'UPDATE', 'DELETE', 'SELECT_ALL', 'SELECT_SINGLE'
    @ID INT = NULL,
    @FNAME VARCHAR(255) = NULL,
    @SNAME VARCHAR(255) = NULL,
    @AGE INT = NULL,
    @YEAR VARCHAR(255) = NULL,
    @EMAIL VARCHAR(255) = NULL,
    @MOBILE VARCHAR(255) = NULL,
    @ADDRESS VARCHAR(255) = NULL,
    @ISACTIVE BIT = NULL, -- Now set as BIT (Boolean)
    @CREATEDBY VARCHAR(255) = NULL,
    @CREATEDON DATETIME = NULL,
    @UPDATEDBY VARCHAR(255) = NULL,
    @UPDATEDON DATETIME = NULL,
    @COUNTRY_ID INT = NULL,
    @STATE_ID INT = NULL,
    @CITI_ID INT = NULL
AS
BEGIN
    IF @Action = 'SELECT_ALL'
    BEGIN
        SELECT 
            s.ID, s.FNAME, s.SNAME, s.AGE, s.YEAR, s.EMAIL, s.MOBILE, 
            s.ADDRESS, s.ISACTIVE, s.CREATEDBY, s.CREATEDON, s.UPDATEDON, 
            c.COUNTRY_NAME, st.STATE_NAME, ct.CITY_NAME 
        FROM 
            students s
        INNER JOIN 
            countrys c ON s.COUNTRY_ID = c.COUNTRY_ID
        INNER JOIN 
            states st ON s.STATE_ID = st.STATE_ID
        INNER JOIN 
            cities ct ON s.CITI_ID = ct.CITI_ID
    END
    ELSE IF @Action = 'SINGLE'
    BEGIN
        SELECT 
            s.ID, s.FNAME, s.SNAME, s.AGE, s.YEAR, s.EMAIL, s.MOBILE, 
            s.ADDRESS, s.ISACTIVE, s.CREATEDBY, s.CREATEDON, s.UPDATEDON, 
            c.COUNTRY_NAME, st.STATE_NAME, ct.CITY_NAME 
        FROM 
            students s
        INNER JOIN 
            countrys c ON s.COUNTRY_ID = c.COUNTRY_ID
        INNER JOIN 
            states st ON s.STATE_ID = st.STATE_ID
        INNER JOIN 
            cities ct ON s.CITI_ID = ct.CITI_ID
        WHERE 
            s.ID = @ID
    END
    ELSE IF @Action = 'INSERT'
    BEGIN 
        INSERT INTO students 
            (ID,FNAME, SNAME, AGE, YEAR, EMAIL, MOBILE, ADDRESS, ISACTIVE, 
             CREATEDBY, CREATEDON, UPDATEDBY, UPDATEDON, COUNTRY_ID, STATE_ID, CITI_ID) 
        VALUES
            (@ID,@FNAME, @SNAME, @AGE, @YEAR, @EMAIL, @MOBILE, @ADDRESS, @ISACTIVE, 
             @CREATEDBY, @CREATEDON, @UPDATEDBY, @UPDATEDON, @COUNTRY_ID, @STATE_ID, @CITI_ID)
    END
    ELSE IF @Action = 'DELETE'
    BEGIN
        DELETE FROM students WHERE ID = @ID
    END
    ELSE IF @Action = 'UPDATE'
    BEGIN
        UPDATE students 
        SET 
            FNAME = @FNAME, 
            SNAME = @SNAME, 
            AGE = @AGE, 
            YEAR = @YEAR, 
            EMAIL = @EMAIL, 
            MOBILE = @MOBILE, 
            ADDRESS = @ADDRESS, 
            ISACTIVE = @ISACTIVE, 
            CREATEDBY = @CREATEDBY, 
            CREATEDON = @CREATEDON, 
            UPDATEDBY = @UPDATEDBY, 
            UPDATEDON = @UPDATEDON, 
            COUNTRY_ID = @COUNTRY_ID, 
            STATE_ID = @STATE_ID, 
            CITI_ID = @CITI_ID
        WHERE 
            ID = @ID 
    END
END;




===================


CREATE TABLE students(
    ID INT PRIMARY KEY,
    FNAME VARCHAR(255),
    SNAME VARCHAR(255),
    AGE INT,
    STATE VARCHAR(255),
    YEAR VARCHAR(255),
    EMAIL VARCHAR(255),
    MOBILE VARCHAR(255),  
    ADDRESS VARCHAR(255),
    ISACTIVE BIT,  -- Changed to BIT 
    CREATEDBY VARCHAR(255),
    CREATEDON DATETIME,  -- Changed to DATETIME
    UPDATEDBY VARCHAR(255),
    UPDATEDON DATETIME,  -- Changed to DATETIME
    COUNTRY_ID INT FOREIGN KEY REFERENCES countrys(COUNTRY_ID),
    STATE_ID INT FOREIGN KEY REFERENCES states(STATE_ID),
    CITI_ID INT FOREIGN KEY REFERENCES cities(CITI_ID)
);

CREATE TABLE countrys(
    COUNTRY_ID INT PRIMARY KEY,
    COUNTRY_CODE VARCHAR(255),
    COUNTRY_NAME VARCHAR(255),
    IS_ACTIVE BIT,  -- Changed to BIT 
    CREATED_BY VARCHAR(255),
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255),
    UPDATED_ON DATETIME  -- Changed to DATETIME
);

CREATE TABLE states(
    STATE_ID INT PRIMARY KEY,
    STATE_CODE VARCHAR(255),
    STATE_NAME VARCHAR(255),
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255),
    CREATED_ON DATETIME,   
    UPDATED_BY VARCHAR(255),
    UPDATED_ON DATETIME,   
    COUNTRY_ID INT FOREIGN KEY REFERENCES countrys(COUNTRY_ID)
);

CREATE TABLE cities(
    CITI_ID INT PRIMARY KEY,
    CITY_CODE VARCHAR(255),
    CITY_NAME VARCHAR(255),
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255),
    CREATED_ON DATETIME,  
    UPDATED_BY VARCHAR(255),
    UPDATED_ON DATETIME,   
    COUNTRY_ID INT FOREIGN KEY REFERENCES countrys(COUNTRY_ID),
    STATE_ID INT FOREIGN KEY REFERENCES states(STATE_ID)
);
==============
DATA BASE TABLE FINAL CRUD
==============

SELECT *FROM gp_students 
SELECT *FROM gp_countrys 
SELECT *FROM gp_states
SELECT *FROM gp_cities
SELECT *FROM  gp_universities
SELECT *FROM gp_college
SELECT *FROM  gp_universitiesprograms
SELECT *FROM gp_programs

CREATE TABLE gp_students(
    ID INT PRIMARY KEY,
    FNAME VARCHAR(255),
    SNAME VARCHAR(255),
    AGE INT,
    STATE VARCHAR(255),
    YEAR VARCHAR(255),
    EMAIL VARCHAR(255),
    MOBILE VARCHAR(255),  -- Fixed typo from 'MOBIE' to 'MOBILE'
    ADDRESS VARCHAR(255),
    ISACTIVE BIT,  -- Changed to BIT (boolean)
    CREATEDBY VARCHAR(255),
    CREATEDON DATETIME,  -- Changed to DATETIME
    UPDATEDBY VARCHAR(255),
    UPDATEDON DATETIME,  -- Changed to DATETIME
    COUNTRY_ID INT FOREIGN KEY REFERENCES gp_countrys(COUNTRY_ID),
    STATE_ID INT FOREIGN KEY REFERENCES gp_states(STATE_ID),
    CITI_ID INT FOREIGN KEY REFERENCES gp_cities(CITI_ID), 
    CLG_ID INT FOREIGN KEY REFERENCES gp_college(CLG_ID),
    UNI_ID INT FOREIGN KEY REFERENCES gp_universities(UNI_ID),
    PROG_ID INT FOREIGN KEY REFERENCES gp_programs(PROG_ID)
);

CREATE TABLE gp_countrys(
    COUNTRY_ID INT PRIMARY KEY,
    COUNTRY_CODE VARCHAR(255), 
    COUNTRY_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME  -- Changed to DATETIME
);

CREATE TABLE gp_states(
    STATE_ID INT PRIMARY KEY,
    STATE_CODE VARCHAR(255), 
    STATE_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME,  -- Changed to DATETIME
    COUNTRY_ID INT FOREIGN KEY REFERENCES gp_countrys(COUNTRY_ID)
);

CREATE TABLE gp_cities(
    CITI_ID INT PRIMARY KEY,
    CITY_CODE VARCHAR(255), 
    CITY_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME,  -- Changed to DATETIME
    COUNTRY_ID INT FOREIGN KEY REFERENCES gp_countrys(COUNTRY_ID),
    STATE_ID INT FOREIGN KEY REFERENCES gp_states(STATE_ID)
);

CREATE TABLE gp_universities(
    UNI_ID INT PRIMARY KEY,
    UNI_CODE VARCHAR(255), 
    UNI_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME,  -- Changed to DATETIME
    COUNTRY_ID INT FOREIGN KEY REFERENCES gp_countrys(COUNTRY_ID)
);

CREATE TABLE gp_college(
    CLG_ID INT PRIMARY KEY,
    CLG_CODE VARCHAR(255), 
    CLG_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME,  -- Changed to DATETIME
    UNI_ID INT FOREIGN KEY REFERENCES gp_universities(UNI_ID),
    CITI_ID INT FOREIGN KEY REFERENCES gp_cities(CITI_ID),
    STATE_ID INT FOREIGN KEY REFERENCES gp_states(STATE_ID)
);
 

CREATE TABLE gp_programs(
    PROG_ID INT PRIMARY KEY,
    PROG_CODE VARCHAR(255), 
    PROG_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME  -- Changed to DATETIME
);


CREATE TABLE gp_universitiesprograms(
    UNIP_ID INT PRIMARY KEY,
    UNIP_CODE VARCHAR(255), 
    UNIP_NAME VARCHAR(255), 
    IS_ACTIVE BIT,  -- Changed to BIT (boolean)
    CREATED_BY VARCHAR(255), 
    CREATED_ON DATETIME,  -- Changed to DATETIME
    UPDATED_BY VARCHAR(255), 
    UPDATED_ON DATETIME,  -- Changed to DATETIME
    PROG_ID INT FOREIGN KEY REFERENCES gp_programs(PROG_ID),
    UNI_ID INT FOREIGN KEY REFERENCES gp_universities(UNI_ID)
);